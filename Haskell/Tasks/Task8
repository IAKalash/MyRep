data Tree a = Empty | Node a (Tree a) (Tree a)
    deriving (Show, Read, Eq)

isSym :: Eq a => Tree a -> Bool
isSym Empty = error "Empty Tree"
isSym (Node n l r) = isSym' l r

isSym' :: Eq a => Tree a -> Tree a -> Bool
isSym' Empty Empty = True
isSym' Empty (Node _ _ _) = False
isSym' (Node _ _ _) Empty = False
isSym' (Node n l r) (Node n2 l2 r2) | n == n2 = (isSym' l r2) && (isSym' r l2)
                                    | otherwise = False
