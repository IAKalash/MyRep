# Coco-de-Mer-8 (CdM-8) Processor Secondary Decoder EXTENSION Specification
####################### MARK 5, 28.12.2019 v1, *** REDUCED CORE ***
#
:4,10,   # 4-bit Sequencer, using 10 phases  

#
#### Secondary Decoder Output Signal Definition
#

# Register file controls:
asrtS,	# Assert register Rs on bus 0
asrtD,  # Assert register Rd on bus 1
latch,	# Latch register Rd from bus 1

# PC controls:
PC2b0,		# Assert PC on bus 0
PC2b1,		# Assert PC on bus 1
latchRX,	# Latch RX from bus 1
RX2PC,  	# Latch RX content in PC
latchPC, 	# Latch PC from bus 1
PCinc,		# PC:=PC+1 on falling clock
PCuH,		# use higher half of PC and RX
 
# SP controls
SP2b0,          # Assert SP on bus 0
SP2b1,          # Assert SP on bus 1
latchSP,	# Latch SP from bus 1
SPstep,		# SP:=SP+-1 on falling clock, see next line
up_down,	# +1 if up_down is high else â€“1
SPoffset,	# SP:=SP + bus1 on falling clock
SPoff2b1,	# Assert SP+bus0 on bus 1

# ALU controls
ALU2b1,		# Assert ALU output on bus 1
RR2b1,		# Assert RR on bus 1
latchPS,	# Latch CVZN in PS register

# Memory
mem,		# Memory interface active in this cycle
mem_ld,		# This memory cycle is read (otherwise write)
data,		# used when mem_ld=1 to indicate read-data, oherwise read-instr

PSR2b1,		# Assert PSR on b1
latchPSR,	# latch PSR from b1
vec,		# Assert interrupt vector addr on b0
vec_bit0,
vec_bit1,


stop		# stop the clock
#####################

# EXTENSION (NON-CORE) INSTRUCTION SET

# ALL-REG PUSH/POP
pushall: SPstep;					# prepare to push
		 SP2b0, asrtD, mem, SPstep, data;	# r3
		 SP2b0, asrtD, mem, SPstep, data;	# r2
		 SP2b0, asrtD, mem, SPstep, data;	# r1
		 SP2b0, asrtD, mem, data			# r0

popall:	SP2b0, mem, data, mem_ld, latch, SPstep, up_down;	# r0
 		SP2b0, mem, data, mem_ld, latch, SPstep, up_down;	# r1
 		SP2b0, mem, data, mem_ld, latch, SPstep, up_down;	# r2
 		SP2b0, mem, data, mem_ld, latch, SPstep, up_down	# r3

# control
jsr: 	PC2b0, mem, mem_ld, latchRX, PCinc;					#load low byte of target into rx
		PC2b0, mem, mem_ld, latchRX, PCuH, PCinc, SPstep;   #load hight byte of target into rx, prepare to push
		PC2b1, PCuH, SP2b0, mem, data, SPstep;				#push hight byte of next instruction
		PC2b1, SP2b0, mem, data, RX2PC						#push low byte of next instruction, mov RX to PC

rts:	SP2b0, up_down, SPstep, mem, mem_ld, data, latchRX;
		SP2b0, up_down, SPstep, mem, mem_ld, data, latchRX, PCuH;
		RX2PC

crc:	SP2b0, up_down, SPstep, mem, mem_ld, data, latchRX;
		SP2b0, mem, mem_ld, data, latchRX, PCuH;
		SP2b0, mem, PC2b1, PCuH, data, SPstep;
		SP2b0, mem, PC2b1, data, RX2PC

jmp_long:   PC2b0, mem, mem_ld, latchRX, PCinc;
            PC2b0, mem, mem_ld, latchRX, PCuH, PCinc;
            RX2PC


# INTERRUPTS

ioi:	SPstep;										# prepare to push
		SP2b0, PCuH, mem, data, PC2b1, SPstep;		# push PCH onto stack
		SP2b0, mem, data, PC2b1, SPstep;			# push PCL onto stack
		SP2b0, mem, data, PSR2b1;					# push PS onto stack (data memory)
		vec, mem, mem_ld, latchRX;					# assert vector address on b0 and load RXL
		vec, vec_bit0, PCuH, mem, mem_ld, latchRX;	# assert vector address + 1 on b0 and load RXH
		vec, vec_bit1, mem, mem_ld, latchPSR, RX2PC	# assert vector address + 2 on b0 and load new PS, latch RX to PC
	
rti: 	SP2b0, mem, data, mem_ld, latchPSR, SPstep, up_down; 		# pop PSR off the stack
		SP2b0, mem, data, mem_ld, latchRX,  SPstep, up_down; 		# pop RXL off the stack
		SP2b0, mem, data, mem_ld, latchRX,  SPstep, up_down, PCuH; 	# pop RXH off the stack
		RX2PC														# latch RX to PC


fetch:	PC2b0, mem_ld, mem, PCinc	# instruction fetch, has to be  last entry for priority reasons in any synthesised part 



